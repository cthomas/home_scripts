" Enable advanced VIM features by default
set nocp

" Pathogen
call pathogen#infect()
call pathogen#helptags()

" Turn on syntax hightlighting
syntax enable

" Highlight C whitespace errors
let c_space_errors=1

" Enable filetype plugins
filetype plugin on

map <C-L> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR>
set tags=~/.vim/stdtags,tags,.tags,../tags

" If you prefer the Omni-Completion tip window to close when a selection is
" " made, these lines close it on movement in insert mode or when leaving
" " insert mode
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" Remove trailing spaces binding
map <F12> :call TrimWhiteSpace()<CR>
function! TrimWhiteSpace()
  %s/\s*$//
  ''
endfunction

function! UseSpaces()
  set expandtab
  set tabstop=4
  set shiftwidth=4
  set smartindent
endfunction

function! UseTabs()
  set noexpandtab
  set smartindent
endfunction

function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

" Spell check binding
map ^S :w!<CR>:!aspell check %<CR>:e! %<CR>

" Syntastic Global Options
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1
let g:syntastic_error_symbol="âœ—"
let g:syntastic_cpp_check_header=1
let g:syntastic_cpp_auto_refresh_includes=1
let g:syntastic_cpp_compiler='g++'
let g:syntastic_cpp_compiler_options=' -std=c++11'
let g:syntastic_python_checkers=['pyflakes', 'flake8']
let g:syntastic_sh_checkers=['checkbashisms']

autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4 smartindent
autocmd Filetype python match Error /\s\+$/
autocmd Filetype cpp setlocal noexpandtab smartindent
